import flet as ft
import os
import json
import keyboard
import uuid
import hashlib
import socket
import threading
import winsound as ws
import sys
import random
import string

if getattr(sys, 'frozen', False):  # Проверяем, запущен ли бинарник
    base_path = sys._MEIPASS  # Путь к временной папке Nuitka
else:
    base_path = os.path.dirname(__file__)  # Обычный путь при запуске скрипта
assets_path = os.path.join(base_path, "assets")


######################################################################################################################################################
#цытаты
#залипательный гудок
#ссылка на дс
#  
#
#
#
#
#
#
######################################################################################################################################################


######################################################################################################################################################


        
def main(page: ft.Page):
    def on_close(e):
        if e.data == "close":
            process_name = "flet.exe"  # Замените на нужное имя процесса
            os.system(f"taskkill /F /IM {process_name}")
            os._exit(0)
    
    
    page.theme_mode = ft.ThemeMode.DARK
    page.bgcolor = ft.Colors.BLACK

    # Задаем размер окна
    page.window.width = 600
    page.window.height = 700
    page.window.maximizable = False
    page.window.resizable = False
    page.title = "Кракаут 2MRDR хуй знает что "
    page.window.center()
    page.vertical_alignment = ft.MainAxisAlignment.CENTER  # Центрирование по вертикали
    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER  # Центрирование по горизонтали
    page.window.icon = f"{assets_path}/icon.ico"
    page.window.prevent_close = True
    page.window.on_event = on_close
    ##################################################################################################################################################
    global client
    activation_toggle = False
    
    
    ##################################################################################################################################################

    def pagep(t):
        page.overlay.append(ft.SnackBar(content=ft.Text(t),open = True))
        print(t)
        page.update()
        


    ##################################################################################################################################################
    #функции для работы с профилями 
    #PROFILES_DIR = os.path.join(os.path.dirname(__file__), "profiles")


    appdata_path = os.getenv('APPDATA')  # Получаем путь к %APPDATA%
    PROFILES_DIR = os.path.join(appdata_path, '2MRDR', 'profiles')  # Формируем путь к папке с профилями
    os.makedirs(os.path.dirname(PROFILES_DIR), exist_ok=True)  # Создаем папку, если она не существует

    # Путь к файлу настроек
    SETTINGS_FILE = os.path.join(appdata_path, '2MRDR', 'settings.json')


# Функция для сохранения настроек
    def save_settings(settings):
        with open(SETTINGS_FILE, "w") as f:
            json.dump(settings, f)
    # Функция для загрузки настроек
    def load_settings():
        global load_settingsapp, save_app_settings
        if os.path.exists(SETTINGS_FILE):
            with open(SETTINGS_FILE, "r") as f:
                return json.load(f)
        else:
            # Создаем файл настроек с шаблонными значениями
            default_settings = {
                "last_profile": None,
                "ip": "2MRDR",
                "port": 25100,
                "sound_enable": False,
                "hotkey": "G",
                "hotkeyscan": 34,
                "hotkeycruis": "H",
                "hotkeycruisscan": 35,
                "hotkeytogslider": False,
                "private_key": ''.join(random.choices(string.ascii_letters + string.digits, k=8)),
            }
            save_settings(default_settings)
            return default_settings
            
    load_settings()
    
    

    def save_app_settings():
        settings = {
                "last_profile": profile_dropdown.value,
                "ip": ip_input.value,
                "port": port_input.value,
                "sound_enable": sound_enable.value,
                "hotkey": hotkey.text,
                "hotkeyscan": toggle_key,
                "hotkeycruis": hotkeycruis.text,
                "hotkeycruisscan": toggle_keycruis,
                "hotkeytogslider": hotkeytogslider.value,
                "private_key": private_key_input.value,
            }
        save_settings(settings)
    
    # Загрузка настроек
    app_settings = load_settings()
    
    def load_settingsapp():
        global toggle_key, toggle_keycruis
        nonlocal app_settings
        try:
            ip_input.value = app_settings['ip']
            port_input.value = app_settings['port']
            sound_enable.value = app_settings['sound_enable']
            hotkey.text = app_settings['hotkey']
            toggle_key = app_settings['hotkeyscan']
            hotkeycruis.text = app_settings['hotkeycruis']
            toggle_keycruis = app_settings['hotkeycruisscan']
            hotkeytogslider.value = app_settings['hotkeytogslider']
            private_key_input.value = app_settings['private_key']
        except:
            pagep("Error loading settings")
    
    new_profile_name = ft.TextField(label="Имя профиля",width=200)

    dlg_new_profile = ft.AlertDialog(
        modal=True,
        title=ft.Text("Введите имя нового профиля"),
        content=new_profile_name,
        actions=[
            ft.TextButton("Создать", on_click=lambda e: (create_profile(new_profile_name.value, page),setattr(new_profile_name, 'value', ""), page.close(dlg_new_profile))),
            ft.TextButton("Отмена", on_click=lambda e: page.close(dlg_new_profile)),
        ],
        actions_alignment=ft.MainAxisAlignment.END,
        on_dismiss=None,
        )


    # Функция для загрузки профилей
    def load_profiles():
        if not os.path.exists(PROFILES_DIR):
            os.makedirs(PROFILES_DIR)
        profiles = {}
        for filename in os.listdir(PROFILES_DIR):
            if filename.endswith(".json"):
                with open(os.path.join(PROFILES_DIR, filename), "r") as f:
                    profiles[filename[:-5]] = json.load(f)
        return profiles

    # Функция для сохранения профиля
    def save_profile(profile_name, settings):
        with open(os.path.join(PROFILES_DIR, f"{profile_name}.json"), "w") as f:
            json.dump(settings, f)

    # Функция для удаления профиля
    def delete_profile(profile_name):
        os.remove(os.path.join(PROFILES_DIR, f"{profile_name}.json"))


    # Загрузка профилей
    profiles = load_profiles()

    # Функция для применения настроек профиля
    def apply_profile(profile_name, page):
        global settings
        profiles = load_profiles()
        if profile_name in profiles:
            try:
                settings = profiles[profile_name]
                keys_input.value = settings['keys']
                replace_key_input.value = settings['replace_key']
            except:
                pagep("Error applying profile")
            
            profiles = load_profiles()
            profile_dropdown.options=[ft.dropdown.Option(key=name) for name in profiles.keys()]

            # Сохранение последнего выбранного профиля
            save_app_settings()

            page.update()

    # Функция для сохранения текущего профиля
    def save_current_profile(page):
        current_profile = profile_dropdown.value
        if current_profile:
            settings = {
                "keys": keys_input.value,
                "replace_key": replace_key_input.value,
            }
            save_profile(current_profile, settings)
            profiles[current_profile] = settings

    # Функция для создания нового профиля
    def create_profile(profile_name, page):
        global settings
        profiles = load_profiles()
        if profile_name and profile_name not in profiles:
            settings = {
                "keys": "w,a,s,d,space",
                "replace_key": "a=b;d=c,e",
            }
            save_profile(profile_name, settings)
            profiles[profile_name] = settings
            profile_dropdown.options.append(ft.dropdown.Option(key=profile_name))
            profile_dropdown.value = profile_name
            apply_profile(profile_name, page)
            page.update()

    # Функция для удаления текущего профиля и выбора следующего
    def delete_current_profile(page):
        profiles = load_profiles()
        current_profile = profile_dropdown.value
        if current_profile:
            delete_profile(current_profile)
            del profiles[current_profile]
            profile_dropdown.options = [ft.dropdown.Option(key=name) for name in profiles.keys()]
            # Если есть другие профили, выбираем следующий
            if profiles:
                next_profile = list(profiles.keys())[0]
                profile_dropdown.value = next_profile
                apply_profile(next_profile, page)
            else:
                profile_dropdown.value = None

            page.update()



    ##################################################################################################################################################
    #settings menu
    #настройки
    ##################################################################################################################################################

    hotkey = ft.OutlinedButton(
        text="None",
        autofocus=False,
        width=70,
        height=50,
        on_click=lambda e: set_hotkey(e),
        style=ft.ButtonStyle(color="white",side={ft.ControlState.DEFAULT: ft.BorderSide(1, ft.Colors.BLACK)},shape=ft.RoundedRectangleBorder(radius=5),)
    )
    hotkeyw = ft.AlertDialog(title=ft.Text("Нажмите клавишу для хоткея"),modal=True)
    def set_hotkey(e):
        page.open(hotkeyw)
        page.update()
        keyboard.on_press(on_key_event)  # Запускаем обработчик клавиш

    def on_key_event(e):
        global toggle_key
        hotkey.text = e.name.upper()
        toggle_key = e.scan_code
        
        save_current_profile(page)
        page.open(dlg_settings)
        page.update()
        keyboard.unhook_all()
        keyboard.hook(on_press)
        update_keys()
    
    
    ##################################################################################################################################################
    hotkeycruis = ft.OutlinedButton(
        text="None",
        autofocus=False,
        width=70,
        height=50,
        on_click=lambda e: set_hotkeycruis(e),
        style=ft.ButtonStyle(color="white",side={ft.ControlState.DEFAULT: ft.BorderSide(1, ft.Colors.BLACK)},shape=ft.RoundedRectangleBorder(radius=5),)
    )
    
    hotkeytogslider = ft.Switch(
        label="Вкл/Выкл",
        value=False,
        scale=1.2,
        thumb_icon={ft.ControlState.DEFAULT: ft.Icons.KEYBOARD},
        label_position=ft.LabelPosition.LEFT,
    )

    def set_hotkeycruis(e):
        page.open(hotkeyw)
        
        page.update()
        keyboard.on_press(on_key_eventcruis)  # Запускаем обработчик клавиш
        
    def on_key_eventcruis(e):
        global toggle_keycruis
        hotkeycruis.text = e.name.upper()
        toggle_keycruis = e.scan_code
        
        save_current_profile(page)
        page.open(dlg_settings)
        page.update()
        keyboard.unhook_all()
        keyboard.hook(on_press)
        update_keys()
    ##################################################################################################################################################
    
    ip_input = ft.TextField(
        label="IP-адрес",
        label_style=ft.TextStyle(color=ft.Colors.WHITE),
        value=None,
        width=400,
        text_align=ft.TextAlign.CENTER,
        color=ft.Colors.WHITE,
        on_submit = lambda e: client_connect(),
        #on_blur = lambda e: pagep("on_blur"),
        #on_focus = lambda e: pagep("on_focus"),
    )
    
    port_input = ft.TextField(
        label="Порт",
        label_style=ft.TextStyle(color=ft.Colors.WHITE),
        value=None,
        width=400,
        color=ft.Colors.WHITE,
        text_align=ft.TextAlign.CENTER,
        on_submit = lambda e: client_connect(),
        )

    def sl_sound_toggle():
        if sound_enable.value:
            sound_enable.thumb_icon = {ft.ControlState.DEFAULT: ft.Icons.VOLUME_UP_OUTLINED}
        else:
            sound_enable.thumb_icon = {ft.ControlState.DEFAULT: ft.Icons.VOLUME_OFF}
        page.update()
    
    sound_enable = ft.Switch(
        label="Включить звук",
        value=False,
        scale=1.2,
        thumb_icon={ft.ControlState.DEFAULT: ft.Icons.FILE_UPLOAD_OFF},
        on_change = lambda e: (sl_sound_toggle()),
        label_position=ft.LabelPosition.LEFT,
    )
    
    dskey = ft.TextButton(
        "🔊 Discord",
        scale=1.2,
        on_click=lambda e: os.system("start https://discord.gg/D5nav84yCX")
    )
    
    rowhotkey_settings = ft.Row([ft.Text("Хоткей Вкл/Выкл"), hotkey],alignment=ft.alignment.center)
    containerhotkey_settings = ft.Container(
        content=ft.Column([rowhotkey_settings,sound_enable],alignment=ft.alignment.center,horizontal_alignment=ft.CrossAxisAlignment.CENTER,expand=False),
        alignment=ft.alignment.center,
        expand=False,
        border=ft.border.all(1, ft.Colors.BLACK),
        border_radius=10,
        padding=10,
    )
    
    containerip_settings = ft.Container(
        content=ft.Column([ip_input,port_input],alignment=ft.alignment.center,horizontal_alignment=ft.CrossAxisAlignment.CENTER,expand=False),
        alignment=ft.alignment.center,
        expand=False,
        border=ft.border.all(1, ft.Colors.BLACK),
        border_radius=10,
        padding=10,
    )
    
    rowcruis_settings = ft.Row([ft.Text("Круиз-контроль"), hotkeycruis],alignment=ft.alignment.center)
    containercruis_settings = ft.Container(
        content=ft.Column([rowcruis_settings,hotkeytogslider],alignment=ft.alignment.center,horizontal_alignment=ft.CrossAxisAlignment.CENTER,expand=False),
        alignment=ft.alignment.center,
        expand=False,
        border=ft.border.all(1, ft.Colors.BLACK),
        border_radius=10,
        padding=10,
    )   
    
    
    dlg_settings = ft.AlertDialog(
        modal=True,
        title=ft.Container(content=ft.Text("Настройки"),alignment=ft.alignment.center,expand=True,),
        title_padding=10,
        content=ft.Column([containerhotkey_settings,containercruis_settings,containerip_settings],alignment=ft.MainAxisAlignment.START,horizontal_alignment=ft.CrossAxisAlignment.CENTER,expand=True,),
        content_padding=10,
        actions=[ft.TextButton("Применить", on_click=lambda e: (save_app_settings(), page.close(dlg_settings), client_connect()),width=200,height=50)],
        actions_alignment=ft.MainAxisAlignment.CENTER,
    )
    
    whitelist_id = ft.TextField(label="Твой whitelist идентификатор",value=None,width=300,color=ft.Colors.WHITE,text_align=ft.TextAlign.CENTER,border_color=ft.Colors.WHITE,read_only=True)
    whitelistdlg = ft.AlertDialog(
        modal=True,
        title=ft.Container(content=ft.Text("Ошибка подключения"),alignment=ft.alignment.center,expand=True,),
        content=ft.Column([ft.Text("Ошибка подключения к серверу, вероятно тебя ещё не добавили в белый список, попроси администратора добавить тебя в белый список, нас можно найти на нашем сервере в Discord"),whitelist_id],width=300,height=300,alignment=ft.MainAxisAlignment.SPACE_EVENLY,horizontal_alignment=ft.CrossAxisAlignment.CENTER,expand=True,),
        actions=[dskey,ft.TextButton("Закрыть",scale=1.2, on_click=lambda e: page.window.close())],
        actions_alignment=ft.MainAxisAlignment.CENTER,
    )
   
    ##################################################################################################################################################



    ##################################################################################################################################################
    

    profile_dropdown = ft.Dropdown(
        options=[ft.dropdown.Option(key=name) for name in profiles.keys()],
        on_change=lambda e: (apply_profile(e.control.value, page), update_keys()),
        width=220,
        border_color=ft.Colors.WHITE,
        label_style=ft.TextStyle(color=ft.Colors.WHITE,),
        color=ft.Colors.WHITE,
        bgcolor=ft.Colors.BLACK,
        )
    
    keys_input = ft.TextField(
        label="Клавиши для мониторинга",
        tooltip="Клавиши для мониторинга (через запятую формат \"w,a,s,d,space,shift,ctrl,alt,tab,esc,enter\")",
        label_style=ft.TextStyle(color=ft.Colors.WHITE),
        value=None,
        width=400,
        color=ft.Colors.WHITE,
        text_align=ft.TextAlign.CENTER,
        border_color=ft.Colors.WHITE,
        on_change = lambda e: (save_current_profile(page), update_keys()),
    )
    replace_key_input = ft.TextField(
        label="Ключи подмены (подробнее в подсказке)",
        label_style=ft.TextStyle(color=ft.Colors.WHITE),
        tooltip="Ключи подмены (через запятую формат \"a=b;c=d,e,r\")",
        value=None,
        width=400,
        color=ft.Colors.WHITE,
        text_align=ft.TextAlign.CENTER,
        border_color=ft.Colors.WHITE,
        on_change = lambda e: (save_current_profile(page), update_keys()),
        )

    private_key_input = ft.TextField(
        label="Ключ приватной комнаты",
        label_style=ft.TextStyle(color=ft.Colors.WHITE),
        value=None,
        width=290,
        color=ft.Colors.WHITE,
        text_align=ft.TextAlign.CENTER,
        border_color=ft.Colors.WHITE,
        on_submit = lambda e: apply_private_room(),
        password=True, 
        can_reveal_password=True
        )
   
    def apply_private_room():
        if len(private_key_input.value) >= 3 and len(private_key_input.value) <= 16:
            client.send(f"Join_room|{private_key_input.value}".encode('utf-8'))
            pagep(f"Успешный переход в новую комнату")
            save_app_settings()
        else:
            pagep("Ошибка применения приватной комнаты, длина ключа должна быть от 3 до 16 символов")   
    
    apply_button = ft.OutlinedButton(
        text="Применить",
        width=100,
        height=50,
        style=ft.ButtonStyle(color=ft.Colors.WHITE,bgcolor=ft.Colors.BLACK,side={ft.ControlState.DEFAULT: ft.BorderSide(2)},shape=ft.RoundedRectangleBorder(radius=5),),
        #on_click=apply_settings,
        on_click=lambda e: apply_private_room(),
    )
    

    
    rowtop = ft.Row(
        controls=[
            profile_dropdown,
            ft.IconButton(icon=ft.Icons.PERSON_ADD,icon_size=18,width=32,tooltip="Добавить профиль",icon_color=ft.Colors.WHITE,on_click=lambda e: page.open(dlg_new_profile)),
            ft.IconButton(icon=ft.Icons.FOLDER,icon_size=18,width=32,tooltip="Открыть папку с профилями",icon_color=ft.Colors.WHITE,on_click=lambda e: os.system("start " + PROFILES_DIR)),
            ft.IconButton(icon=ft.Icons.DELETE,icon_size=18,width=32,tooltip="Удалить профиль",icon_color=ft.Colors.WHITE,on_click=lambda e: delete_current_profile(page)),
            ft.Container(content=ft.IconButton(icon=ft.Icons.SETTINGS,icon_size=32,tooltip="Настройки",icon_color=ft.Colors.WHITE,on_click=lambda e: page.open(dlg_settings)),alignment=ft.alignment.top_right,expand=True,),
        ],
        alignment=ft.MainAxisAlignment.SPACE_BETWEEN,  # Распределяем пространство между кнопками
    )
    def sendersl_change(e):
        if sendersl.value:
            sendersl.thumb_icon = {ft.ControlState.DEFAULT: ft.Icons.FILE_UPLOAD}
        else:
            sendersl.thumb_icon = {ft.ControlState.DEFAULT: ft.Icons.FILE_UPLOAD_OFF}
        page.update()

    def receiversl_change(e):
        if receiversl.value:
            receiversl.thumb_icon = {ft.ControlState.DEFAULT: ft.Icons.FILE_DOWNLOAD}
        else:
            receiversl.thumb_icon = {ft.ControlState.DEFAULT: ft.Icons.FILE_DOWNLOAD_OFF}
        page.update()

    sendersl = ft.Switch(label="Отправлять",value=False,scale=1.2,thumb_icon={ft.ControlState.DEFAULT: ft.Icons.FILE_UPLOAD_OFF},on_change=sendersl_change)
    receiversl = ft.Switch(label="Принимать",value=False,scale=1.2,label_position=ft.LabelPosition.LEFT,thumb_icon={ft.ControlState.DEFAULT: ft.Icons.FILE_DOWNLOAD_OFF},on_change=receiversl_change)
    togglerow = ft.Row(
        controls=[
            sendersl,
            receiversl,
        ],
        alignment=ft.MainAxisAlignment.SPACE_EVENLY,
    )
    citate = ft.Text(
        value="Нет подключения к серверу",
        width=450,
        color=ft.Colors.WHITE,
        text_align=ft.TextAlign.CENTER,
    )

    page.add(
        rowtop,
        ft.Column(controls=[togglerow,keys_input,replace_key_input,ft.Row(controls=[private_key_input,apply_button],alignment=ft.MainAxisAlignment.CENTER),],
            alignment=ft.MainAxisAlignment.CENTER,
            horizontal_alignment=ft.CrossAxisAlignment.CENTER,
            spacing=10,  # Отступы между элементами
            expand=True,  # Разворачиваем контейнер по вертикали
        ),
        citate,
        )
    
    load_settingsapp()
    last_profile = app_settings.get("last_profile", None)
    # Установка последнего выбранного профиля при запуске
    if profiles:
        first_profile = last_profile if last_profile in profiles else list(profiles.keys())[0]
        profile_dropdown.value = first_profile
        apply_profile(first_profile, page)
    else:
        create_profile("2MRDR", page)

    page.update()

    ##################################################################################################################################################
    #клиент
    ##################################################################################################################################################
    key_to_scan_code = {'esc': 1 ,'1': 2 ,'2': 3 ,'3': 4 ,'4': 5 ,'5': 6 ,'6': 7 ,'7': 8 ,'8': 9 ,'9': 10 ,'0': 11 ,'-': 12 ,'=': 13 ,'backspace': 14 ,
    ']': 27 ,'[': 26 ,'p': 25 ,'o': 24 ,'i': 23 ,'u': 22 ,'y': 21 ,'t': 20 ,'r': 19 ,'e': 18 ,'w': 17 ,'q': 16 ,'tab': 15 ,'a': 30 ,
    's': 31 ,'d': 32 ,'f': 33 ,'g': 34 ,'h': 35 ,'j': 36 ,'k': 37 ,'l': 38 ,';': 39 ,'\'': 40 ,'enter': 28 ,'right shift': 54 ,'/': 53 ,
    '.': 52 ,',': 51 ,'m': 50 ,'n': 49 ,'b': 48 ,'v': 47 ,'c': 46 ,'x': 45 ,'z': 44 ,'shift': 42 ,'ctrl': 29 ,'left windows': 91 ,'alt': 56 ,
    'space': 57 ,'ralt': 56 ,'menu': 93 ,'rctrl': 29 ,'caps lock': 58 ,'`': 41 ,'~': 41 ,'Q': 16 ,'W': 17 ,'E': 18 ,'R': 19 ,
    'T': 20 ,'Y': 21 ,'U': 22 ,'I': 23 ,'O': 24 ,'P': 25 ,'A': 30 ,'S': 31 ,'D': 32 ,'F': 33 ,'G': 34 ,'H': 35 ,'J': 36 ,'K': 37 ,'L': 38 ,
    'Z': 44 ,'X': 45 ,'C': 46 ,'V': 47 ,'B': 48 ,'N': 49 ,'M': 50 ,'?': 53 ,'f1': 59 ,'f2': 60 ,'f3': 61 ,'f4': 62 ,'f5': 63 ,'f6': 64 ,
    'f7': 65 ,'f8': 66 ,'f9': 67 ,'f10': 68 ,'f11': 87 ,'f12': 88 ,'up': 72 ,'left': 75 ,'right': 77 ,'down': 80 ,'delete': 83 ,'end': 79 ,
    'page down': 81 ,'home': 71 ,'insert': 82 ,'page up': 73 ,'й': 16 ,'ц': 17 ,'у': 18 ,'к': 19 ,'е': 20 ,'н': 21 ,'г': 22 ,'ш': 23 ,'щ': 24 ,
    'з': 25 ,'х': 26 ,'ъ': 27 ,'ф': 30 ,'ы': 31 ,'в': 32 ,'а': 33 ,'п': 34 ,'р': 35 ,'о': 36 ,'л': 37 ,'д': 38 ,'ж': 39 ,'э': 40 ,'Я': 44 ,'ч': 45 ,
    'я': 44 ,'с': 46 ,'м': 47 ,'и': 48 ,'т': 49 ,'ь': 50 ,'б': 51 ,'ю': 52 ,'.': 53 ,',': 53 ,'Й': 16 ,'Ц': 17 ,'У': 18 ,'К': 19 ,'Е': 20 ,'Н': 21 ,
    'Г': 22 ,'Ш': 23 ,'Щ': 24 ,'З': 25 ,'Х': 26 ,'Ъ': 27 ,'Ф': 30 ,'Ы': 31 ,'В': 32 ,'А': 33 ,'П': 34 ,'Р': 35 ,'О': 36 ,'Л': 37 ,'Д': 38 ,'Ж': 39 ,
    'Э': 40 ,'Ч': 45 ,'С': 46 ,'М': 47 ,'И': 48 ,'Т': 49 ,'Ь': 50 ,'Б': 51 ,'Ю': 52,'\\': 43,'Num0': 82 ,'Num1': 79 ,'Num2': 80 ,'Num3': 81 ,'Num4': 75 ,'Num5': 76 ,'Num6': 77 ,'Num7': 71 ,'Num8': 72 ,'Num9': 73 ,}
    
    key_status = {}
    toggle_status = {}
    key_replacements = {}
    
    def toggle(event):
        nonlocal activation_toggle, key_states
        activation_toggle = not activation_toggle
        if sound_enable.value:
            if activation_toggle:
                ws.Beep(int(500), int(200))
                ws.Beep(int(500), int(200))
            else:
                ws.Beep(int(100), int(400))
                for key in key_states:
                    keyboard.release(key)
                key_states = {}

    cruis_status = False
    def on_press(event):
        global toggle_key
        nonlocal cruis_status
        if event.scan_code == toggle_key and event.event_type == "down":
            if event.scan_code not in toggle_status or toggle_status[event.scan_code] == False:
                toggle_status[event.scan_code] = True
                toggle(event)
        elif event.scan_code == toggle_key and event.event_type == "up":
            if event.scan_code in toggle_status and toggle_status[event.scan_code] == True:
                toggle_status[event.scan_code] = False
        elif event.scan_code == toggle_keycruis and event.event_type == "up":
            if hotkeytogslider.value and activation_toggle:
                if cruis_status:
                    cruis_status = False
                else:
                    keyboard.press(toggle_keycruis)
                    cruis_status = True

        if activation_toggle and sendersl.value and event.name.upper() != toggle_key:
            if event.scan_code in keys_scan_codes:
                if event.event_type == "down":
                    if event.scan_code not in key_status or key_status[event.scan_code] == False:
                        key_status[event.scan_code] = True
                        try:
                            client.send(f"Sendkey|{event.scan_code}|True\n".encode('utf-8'))
                        except OSError as e:
                            if e.winerror == 10038 or e.winerror == 10054:
                                client_connect()
                elif event.event_type == "up":
                    if event.scan_code in key_status and key_status[event.scan_code] == True:
                        key_status[event.scan_code] = False
                        client.send(f"Sendkey|{event.scan_code}|False\n".encode('utf-8')) 
                    
  
    def update_keys():
        global keys , keys_scan_codes , key_replacements
        keys = [k.strip() for k in keys_input.value.split(",") if k.strip()]
        keys_scan_codes = [key_to_scan_code.get(key, None) for key in keys]
        keys_scan_codes = [code for code in keys_scan_codes if code is not None]
        #########################################################################
        key_replacements = parse_key_remap(replace_key_input.value)
        key_replacements = replace_keys_and_values(key_replacements, key_to_scan_code)
        #########################################################################

    def parse_key_remap(mapping_str):
        try:
            key_map = {}
            mappings = mapping_str.split(';')
            for mapping in mappings:
                key, value = mapping.split('=')
                key_map[str(key)] = list(map(str, value.split(',')))
            return key_map
        except Exception as e:
            print(f"Ошибка при разборе ключей подмены: {e}")
            return {}
    
    def replace_keys_and_values(data, key_to_scan_code):
        try:
            new_data = {}# Создаем новый словарь для результата
            for key, values in data.items():# Проходим по ключам и значениям исходного словаря
                new_key = key_to_scan_code.get(key, key)# Заменяем ключ, если он есть в словаре замены
                new_values = [key_to_scan_code.get(value, value) for value in values] # Заменяем значения в списке
                new_data[new_key] = new_values# Добавляем в новый словарь
            return new_data
        except Exception as e:
            print(f"Ошибка при замене ключей и значений: {e}")
            return {}
        
        
    def start_monitoring():
        update_keys()
        page.update()
        
        keyboard.hook(on_press)
          
        
    def reciever():
        global client, key_replacements
        while True:
            data = client.recv(1024).decode('utf-8').split('\n')
            if not data:
                break
            for line in data:
                if line.startswith("Sendkey"):  # Нажатие клавиши
                    input_key, state = line.split('|')[1], line.split('|')[2]
                    input_key = int(input_key)  # Преобразуем в число
                    key_press_release(input_key,state)
                elif line.startswith("Get_citate"):
                    citate.value = client.recv(1024).decode('utf-8')
    
    
    
    key_states = {}              
    def key_press_release(input_key, state):
        global key_replacements
        nonlocal key_states
        
        if receiversl.value and activation_toggle:
            # Определяем список клавиш, которые нужно обработать
            keys_to_process = key_replacements.get(input_key, [input_key])
            
            for key in keys_to_process:
                if state == "True":
                    key_states[key] = key_states.get(key, 0) + 1
                else:
                    key_states[key] = max(key_states.get(key, 0) - 1, 0)
            
            # Обрабатываем каждую клавишу в списке
            for key in keys_to_process:
                if key_states.get(key, 0) > 0:
                    keyboard.press(key)
                else:
                    keyboard.release(key)
                    


    def Auth():
        device_id = str(uuid.getnode())
        secret_key = "hrToJ2t73Q8c"
        auth_key = hashlib.sha256((device_id + secret_key).encode()).hexdigest()
        #print(auth_key)
        return auth_key
    
    global client_connect
    def client_connect():
        global client
        
        ip = "5.42.211.89" if str(ip_input.value) == "2MRDR" else str(ip_input.value)
        
        # Закрываем предыдущее соединение, если оно существует
        if 'client' in globals() and client:
            client.close()
        
        # Создаем новое соединение
        client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        try:
            client.connect((str(ip), int(port_input.value)))
            client.send(f"Auth|{Auth()}".encode('utf-8'))
            
            if client.recv(1024).decode('utf-8') == "access_success":
                client.sendall(f"Join_room|{str(private_key_input.value)}".encode('utf-8'))
                data1 = client.recv(1024).decode('utf-8').split('|')
                if data1[0] == "Join_room":
                    pass
                client.sendall(f"Get_citate|1".encode('utf-8'))
                citate.value = client.recv(4096).decode('utf-8')
                page.update()
            else:
                whitelist_id.value = Auth()
                page.open(whitelistdlg)
                #print("access_denied")
                
            threading.Thread(target=reciever,daemon=True).start()
        except Exception as e:
            #print(f"Connection error: {e}")
            if client:
                client.close()
                
    sl_sound_toggle()
    client_connect()
    start_monitoring()
    ##################################################################################################################################################


ft.app(target=main)

